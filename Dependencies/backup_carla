import settings
from Dependencies import STOP, RGB_camera, Preview_camera, Collision_detector
import math
import random
import sys
import glob
import os
try:
    sys.path.append(glob.glob(settings.CARLA_PATH + f'/PythonAPI/carla/dist/carla-*{sys.version_info.major}.{sys.version_info.minor}-{"win-amd64" if os.name == "nt" else "linux-x86_64"}.egg')[0])
except IndexError:
    pass
import numpy as np
import carla
import time
import psutil
import subprocess
from queue import Queue
from dataclasses import dataclass
import re
from multiprocessing import Value, Event
'''
@dataclass
class ACTIONS:
    forward_slow: int = 0
    forward_medium: int = 1
    forward_fast: int = 2
    left_slow: int = 3
    left_medium: int = 4
    left_fast: int = 5
    right_slow: int = 6
    right_medium: int = 7
    right_fast: int = 8
    brake_light: int = 9
    brake_medium: int = 10
    brake_full: int = 11
    no_action: int = 12

ACTION_CONTROL = {
    0: [0.3, 0, 0],
    1: [0.6, 0, 0],
    2: [1, 0, 0],
    3: [0.7, 0, -0.3],
    4: [0.7, 0, -0.6],
    5: [0.7, 0, -1],
    6: [0.7, 0, 0.3],
    7: [0.7, 0, 0.6],
    8: [0.7, 0, 1],
    9: [0, 0.3, 0],
    10: [0, 0.6, 0],
    11: [0, 1, 0],
    12: None,
}

ACTIONS_NAMES = {
    ACTIONS.forward_slow: 'forward_slow',
    ACTIONS.forward_medium: 'forward_medium',
    ACTIONS.forward_fast: 'forward_fast',
    ACTIONS.left_slow: 'left_slow',
    ACTIONS.left_medium: 'left_medium',
    ACTIONS.left_fast: 'left_fast',
    ACTIONS.right_slow: 'right_slow',
    ACTIONS.right_medium: 'right_medium',
    ACTIONS.right_fast: 'right_fast',
    ACTIONS.brake_light: 'brake_light',
    ACTIONS.brake_medium: 'brake_medium',
    ACTIONS.brake_full: 'brake_full',
    ACTIONS.no_action: 'no_action',
}
'''

@dataclass
class ACTIONS:
    forward = 0
    left = 1
    right = 2
    forward_left = 3
    forward_right = 4
    brake = 5
    brake_left = 6
    brake_right = 7
    no_action = 8

ACTION_CONTROL = {
    0: [1, 0, 0],
    1: [0, 0, -1],
    2: [0, 0, 1],
    3: [1, 0, -1],
    4: [1, 0, 1],
    5: [0, 1, 0],
    6: [0, 1, -1],
    7: [0, 1, 1],
    8: None,
}

ACTIONS_NAMES = {
    0: 'forward',
    1: 'left',
    2: 'right',
    3: 'forward_left',
    4: 'forward_right',
    5: 'brake',
    6: 'brake_left',
    7: 'brake_right',
    8: 'no_action',
}


class CarlaEnv:
    
    STEER_AMOUNT = 1.0
    img_width = settings.IMG_WIDTH
    img_height = settings.IMG_HEIGHT
    
    action_space_size = len(settings.ACTIONS)

    def __init__(self, carla_instance, seconds_per_episode=None, steps_per_episode=None, sync_mode=False, synchronizer=None, envSettingsCond=None, stepCond=None, playing=False):
        self.sync_mode = sync_mode
        self.synchronizer = synchronizer
        # Set a client and timeouts
        self.client = carla.Client(*settings.CARLA_HOSTS[carla_instance][:2])
        self.client.set_timeout(5.0)
        
        self.world = self.client.get_world()
        self.blueprint_library = self.world.get_blueprint_library()
        self.vehicle_bp = self.blueprint_library.find(settings.VEHICLE)
        
        # Sensors and helper lists
        self.actor_list = []
        self.front_camera = None
        self.preview_camera = None

        # Updated by agents for statistics
        self.seconds_per_episode = seconds_per_episode
        self.steps_per_episode = steps_per_episode
        
        # A flag indicating that we are just going to test
        self.playing = playing

        # Used with additional preview feature
        self.preview_camera_enabled = False

        # Sets actually configured actions
        self.actions = [getattr(ACTIONS, action) for action in settings.ACTIONS]

        self.envSettingsCond = envSettingsCond
        self.stepCond = stepCond

    # Resets environment for new episode
    def reset(self):
        if self.sync_mode and settings.AGENTS > 1:
            self.synchronizer.reset()
        self.actor_list = []

        #give it 3 seconds to spawn our vehicle (can fail if spawn locations are occupied)
        spawn_start = time.time()
        
        while True:
            try:
                # Get random spot from a list from predefined spots and try to spawn a car there
                transform = random.choice(self.world.get_map().get_spawn_points())
                self.vehicle = self.world.spawn_actor(self.vehicle_bp, transform)
                break
            except:
                time.sleep(0.01)

            # If that can't be done in 3 seconds - forgive (and allow main process to handle for this problem)
            if time.time() > spawn_start + 3:
                raise Exception('Can\'t spawn a car')


        # Append actor to a list of spawned actors, we need to remove them later
        self.actor_list.append(self.vehicle)
        
        self.front_camera = RGB_camera(self.world, self.blueprint_library, self.vehicle, self.frametimes)
        self.actor_list.append(self.front_camera)

        # Preview ("above the car") camera
        if self.preview_camera_enabled is not False:
            # Get the blueprint for the camera
            self.preview_camera = Preview_camera(self.world, self.blueprint_library, self.vehicle, self.preview_camera_enabled)

            # Add camera sensor to the list of actors
            self.actor_list.append(self.preview_camera)
 
        # If we do not apply any control it takes almost a second for car to start moving
        # after episode restart. That starts counting once we apply control for a first time.
        self.vehicle.apply_control(carla.VehicleControl(throttle=1.0, brake=1.0))

        
        if not self.sync_mode:
            time.sleep(settings.SETUP_TIME)
        elif settings.AGENTS == 1:
            ticks = 0
            fixed_delta_seconds = self.world.get_settings().fixed_delta_seconds
            while ticks < (settings.SETUP_TIME / fixed_delta_seconds):
                self.world.tick()
                ticks += 1
        else: 
            fixed_delta_seconds = self.world.get_settings().fixed_delta_seconds
            current_frame = self.world.get_snapshot().frame
            target_frame = current_frame + math.ceil(settings.SETUP_TIME / fixed_delta_seconds)
            while self.world.get_snapshot().frame < target_frame:
                if self.synchronizer.resetting_agents.value == self.synchronizer.total_agents and self.world.get_snapshot().frame == current_frame:
                    self.world.tick()
                current_frame = self.world.get_snapshot().frame



        self.collision_detector = Collision_detector(self.world, self.blueprint_library, self.vehicle)
        self.actor_list.append(self.collision_detector)

        # Wait for a camera to send first image (important at the beginning of first episode)
        if self.sync_mode:
            self.world.tick()
        while self.front_camera.image is None or (self.preview_camera_enabled is not False and self.preview_camera.image is None):
            time.sleep(0.01)
   
        self.vehicle.apply_control(carla.VehicleControl(brake=0.0))   #disengage brakes
            
        self.episode_start = time.time()
        self.cur_step = 0
        
        if self.sync_mode and settings.AGENTS > 1:
            self.synchronizer.reset_finished()
        
        return [self.front_camera.image, 0]


    







    def step(self, action):
        # Monitor if carla stopped sending images for longer than a second. If yes - it broke
        # if not self.sync_mode and time.time() > self.last_cam_update + 1: # idk if this is needed because even in sync mode it should take less time
        if time.time() > self.front_camera.last_cam_update + 1:
            raise Exception('Missing updates from Carla')
        self.cur_step += 1
        # Apply control to the vehicle based on an action
        if self.actions[action] != ACTIONS.no_action:
            self.vehicle.apply_control(carla.VehicleControl(throttle=ACTION_CONTROL[self.actions[action]][0], steer=ACTION_CONTROL[self.actions[action]][2]*self.STEER_AMOUNT, brake=ACTION_CONTROL[self.actions[action]][1]))
    
        
        v = self.vehicle.get_velocity()
        kmh = int(3.6 * math.sqrt(v.x ** 2 + v.y ** 2 + v.z ** 2))
        
        done = False
        if len(self.collision_detector.collision_hist) != 0:
            done = True
            reward = settings.COLLISION_PENALTY
            
            
        # Reward
        elif settings.WEIGHT_REWARDS_WITH_SPEED == 'discrete':
            reward = settings.SPEED_MIN_REWARD if kmh < 50 else settings.SPEED_MAX_REWARD

        elif settings.WEIGHT_REWARDS_WITH_SPEED == 'linear':
            reward = kmh * (settings.SPEED_MAX_REWARD - settings.SPEED_MIN_REWARD) / settings.MAX_SPEED + settings.SPEED_MIN_REWARD

        elif settings.WEIGHT_REWARDS_WITH_SPEED == 'quadratic':
            reward = (kmh / settings.MAX_SPEED) ** 1.3 * (settings.SPEED_MAX_REWARD - settings.SPEED_MIN_REWARD) + settings.SPEED_MIN_REWARD
        if not self.playing and not self.sync_mode:
            # If episode duration limit reached - send back a terminal state
            if self.episode_start + self.seconds_per_episode.value < time.time():
                done = True

            # Weights rewards (not for terminal state)
            if settings.WEIGHT_REWARDS_WITH_EPISODE_PROGRESS and not done:
                reward *= (time.time() - self.episode_start) / self.seconds_per_episode.value

        if not self.playing and self.sync_mode:
            
            if self.cur_step >= self.steps_per_episode.value:
                done = True
            
            if settings.WEIGHT_REWARDS_WITH_EPISODE_PROGRESS and not done:
                reward *= self.cur_step / self.steps_per_episode.value
          
        if self.sync_mode:
            if settings.AGENTS == 1:
                with self.envSettingsCond:
                    self.envSettingsCond.notify()
                with self.stepCond:
                    self.stepCond.wait()
                self.world.tick()
            else:
                self.synchronizer.step()
                # Wait for all agents to reach this point
                
                self.synchronizer.event.wait()

                with self.synchronizer.stepping_agents.get_lock():
                    self.synchronizer.stepping_agents.value -= 1
                    if self.synchronizer.stepping_agents.value == 0:
                        with self.envSettingsCond:
                            print("env notified")
                            self.envSettingsCond.notify()
                        with self.stepCond:
                            print("step waiting")
                            self.stepCond.wait()
                        self.world.tick()
                        self.synchronizer.event.clear()  
        return [self.front_camera.image, kmh], reward, done, None


    # Destroys all agents created from last .reset() call
    def destroy_actors(self):
        for actor in self.actor_list:
            # its either our vehicle
            if hasattr(actor, 'is_alive') and actor.is_alive:
                actor.destroy()
            # or its one of our sensor classes
            else:
                actor.destroy()
                
        self.actor_list = []



def set_sync_mode(carla_host, fixed_delta_sec):

    client = carla.Client(carla_host[0], carla_host[1])
    client.set_timeout(5.0)
    world = client.get_world()
    settings = world.get_settings()
    settings.synchronous_mode = True
    settings.fixed_delta_seconds = fixed_delta_sec
    world.apply_settings(settings)


def get_fixed_delta_seconds():
    client = carla.Client(settings.CARLA_HOSTS[0][:2])
    client.set_timeout(5.0)
    world = client.get_world()
    settings = world.get_settings()
    return settings.fixed_delta_seconds


# Used to synchronize several agents in synchronous mode

class Synchronizer():
    def __init__(self):
        self.event = Event()
        self.resetting_agents = Value('i', 0)
        self.stepping_agents = Value('i', 0)
        self.total_agents = settings.AGENTS
        
    def reset(self):
        with self.resetting_agents.get_lock():
            self.resetting_agents.value += 1
            self.check_event()
    
    def reset_finished(self):
        with self.resetting_agents.get_lock():
            self.resetting_agents.value -= 1
            
    def step(self):
        with self.stepping_agents.get_lock():
            self.stepping_agents.value += 1
            self.check_event()
            
    def check_event(self):
        if self.resetting_agents.value + self.stepping_agents.value >= self.total_agents and self.stepping_agents.value > 0:
            self.event.set()
            

operating_system = 'windows' if os.name == 'nt' else 'linux'

# Returns binary
def get_binary():
    return 'CarlaUE4.exe' if operating_system == 'windows' else 'CarlaUE4.sh'


def get_exec_command():
    binary = get_binary()
    exec_command = binary if operating_system == 'windows' else ('./' + binary)

    return exec_command

def check_port(port):
    for proc in psutil.process_iter(['pid', 'name', 'connections']):
        try:
            for conn in proc.connections():
                if conn.laddr.port == port:
                    if "CarlaUE4" in proc.name():
                        return 0  # Carla is running, so we exit the function
                    else:
                        if settings.FORCE_PORT_IF_TAKEN:
                            proc.terminate()
                            print(f"Process {proc.name()} terminated successfully.")
                            return 0  # Found and terminated a process, so we exit the function
                        else:
                            return -1
        except psutil.NoSuchProcess:
            pass

def kill_processes():

    binary = get_binary()

    # Iterate processes and terminate carla ones
    for process in psutil.process_iter():
        if process.name().lower().startswith(binary.split('.')[0].lower()):
            try:
                process.terminate()
            except:
                pass

    # Check if any are still alive, create a list
    still_alive = []
    for process in psutil.process_iter():
        if process.name().lower().startswith(binary.split('.')[0].lower()):
            still_alive.append(process)

    # Kill process and wait until it's being killed
    if len(still_alive):
        for process in still_alive:
            try:
                process.kill()
            except:
                pass
        psutil.wait_procs(still_alive)



def setup_hosts(playing=False, max_retries=float("inf")):
    for process_no in range(1 if playing else settings.CARLA_HOSTS_NO):
            retries = 0
            while True:
                retries += 1
                try:
                    client = carla.Client(*settings.CARLA_HOSTS[process_no][:2])
                    client.set_timeout(5.0)
                    world = client.get_world()
                    cur_map = world.get_map().name.split('/')[-1]
                    if len(settings.CARLA_HOSTS[process_no]) < 3 or not settings.CARLA_HOSTS[process_no][2]:
                        break
                    map_choice = settings.CARLA_HOSTS[process_no][2]
                    available_maps = [x.split('/')[-1] for x in client.get_available_maps()]
                    if map_choice not in available_maps:
                         map_choice = random.choice([map.split('/')[-1] for map in available_maps])
                    if cur_map != map_choice:
                        client.load_world(map_choice)
                        while True:
                            try:
                                while world.get_map().name.split('/')[-1] != map_choice:
                                    time.sleep(1.0)
                                    retries += 1
                                    if retries >= 5:
                                        raise Exception('Couldn\'t change map [1]')
                                if settings.CARLA_HOSTS[process_no][5]:
                                    world_settings = world.get_settings()
                                    world_settings.no_rendering_mode = True
                                    world.apply_settings(world_settings)
                                break           
                            except Exception as e:
                                print(e)
                                time.sleep(1.0)
                            retries += 1
                            if retries >= max_retries:
                                raise Exception('Couldn\'t change map [2]')

                    break
                except Exception as e:
                    #print(str(e))
                    time.sleep(0.1)

                retries += 1
                if retries >= max_retries:
                    break



def start(playing=False):

    # if the carla instance type is local, we check the ports and remove unwanted things running and wait for our carla instances. If it's remote we expect the server to be ready.
    # So far you can either use local hosts or remote hosts 
    if settings.CARLA_HOSTS_TYPE == "local":
        if settings.RESTART_HOST_ON_START:
            kill_processes()


        amount_of_hosts = 1 if playing else settings.CARLA_HOSTS_NO
        
        # Checks if anything is running on the desired ports. If yes and FORCE_PORT_IF_TAKEN=True it kills that process. Otherwise you get an error, if a port is occupied
        for process_no in range(amount_of_hosts):
            if check_port(settings.CARLA_HOSTS[process_no][1]) == -1:
                print(f"Port {settings.CARLA_HOSTS[process_no][1]} is occupied. If you want to forcfully kill the process using that port set FORCE_PORT_IF_TAKEN=True")
                return -1
        
        for process_no in range(amount_of_hosts):
            command = [get_exec_command(), f' -carla-rpc-port={settings.CARLA_HOSTS[process_no][1]}']
            if settings.CARLA_HOSTS[process_no][3]:
                command.extend(['-benchmark', '-fps=' + str(settings.CARLA_HOSTS[process_no][3])])
            if settings.CARLA_HOSTS[process_no][4]:
                command.extend([f'-quality-level={settings.CARLA_HOSTS[process_no][4]}'])
            subprocess.Popen(command, cwd=settings.CARLA_PATH, shell=True)
        
        time.sleep(2) # give the hosts time to start
    setup_hosts(playing) # check if hosts are ready and setup map and render mode

 
 
 
 
def restart(playing=False):
    setup_hosts(playing, max_retries=60)




def clamp(value, minimum=0.0, maximum=100.0):
    return max(minimum, min(value, maximum))


class Sun(object):
    def __init__(self, azimuth, altitude):
        self.azimuth = azimuth
        self.altitude = altitude
        self._t = 0.0

    def tick(self, delta_seconds):
        self._t += 0.008 * delta_seconds
        self._t %= 2.0 * math.pi
        self.azimuth += 0.25 * delta_seconds
        self.azimuth %= 360.0
        self.altitude = (70 * math.sin(self._t)) - 20

    def __str__(self):
        return 'Sun(alt: %.2f, azm: %.2f)' % (self.altitude, self.azimuth)


class Storm(object):
    def __init__(self, precipitation):
        self._t = precipitation if precipitation > 0.0 else -50.0
        self._increasing = True
        self.clouds = 0.0
        self.rain = 0.0
        self.wetness = 0.0
        self.puddles = 0.0
        self.wind = 0.0
        self.fog = 0.0

    def tick(self, delta_seconds):
        delta = (1.3 if self._increasing else -1.3) * delta_seconds
        self._t = clamp(delta + self._t, -250.0, 100.0)
        self.clouds = clamp(self._t + 40.0, 0.0, 90.0)
        self.rain = clamp(self._t, 0.0, 80.0)
        delay = -10.0 if self._increasing else 90.0
        self.puddles = clamp(self._t + delay, 0.0, 85.0)
        self.wetness = clamp(self._t * 5, 0.0, 100.0)
        self.wind = 5.0 if self.clouds <= 20 else 90 if self.clouds >= 70 else 40
        self.fog = clamp(self._t - 10, 0.0, 30.0)
        if self._t == -250.0:
            self._increasing = True
        if self._t == 100.0:
            self._increasing = False

    def __str__(self):
        return 'Storm(clouds=%d%%, rain=%d%%, wind=%d%%)' % (self.clouds, self.rain, self.wind)


class Weather(object):
    def __init__(self, weather):
        self.weather = weather
        self._sun = Sun(weather.sun_azimuth_angle, weather.sun_altitude_angle)
        self._storm = Storm(weather.precipitation)


    def set_new_weather(self, weather):
        self.weather = weather
        
    def tick(self, delta_seconds):
        self._sun.tick(delta_seconds)
        self._storm.tick(delta_seconds)
        self.weather.cloudiness = self._storm.clouds
        self.weather.precipitation = self._storm.rain
        self.weather.precipitation_deposits = self._storm.puddles
        self.weather.wind_intensity = self._storm.wind
        self.weather.fog_density = self._storm.fog
        self.weather.wetness = self._storm.wetness
        self.weather.sun_azimuth_angle = self._sun.azimuth
        self.weather.sun_altitude_angle = self._sun.altitude

    def __str__(self):
        return '%s %s' % (self._sun, self._storm)
    
@dataclass
class CARLA_SETTINGS_STATE:
    starting = 0
    working = 1
    restarting = 2
    finished = 3
    error = 4


# Carla settings state messages
CARLA_SETTINGS_STATE_MESSAGE = {
    0: 'STARTING',
    1: 'WORKING',
    2: 'RESTARING',
    3: 'FINISHED',
    4: 'ERROR',
}


def find_weather_preset(weather_choice):
    weather_presets = [x for x in dir(carla.WeatherParameters) if re.match('[A-Z].+', x)]
    for preset in weather_presets:
        if preset == weather_choice:
            return getattr(carla.WeatherParameters, preset)
    return None
    


# Carla settings class
class CarlaEnvSettings:

    def __init__(self, process_no, agent_pauses, sync_mode, envSettingsCond, stepCond, stop=None, car_npcs=[0, 0], stats=[0., 0., 0., 0., 0., 0.]):

        # Speed factor changes how fast weather should change
        self.speed_factor = settings.SPEED_FACTOR
                
        # Process number (Carla instane to use)
        self.process_no = process_no

        # Weather and NPC variables
        self.weather = None
        self.spawned_car_npcs = {}

        # Set stats (for Tensorboard)
        self.stats = stats

        # Set externally to restarts settings
        self.restart = False

        # Controls number of NPCs and reset interval
        self.car_npcs = car_npcs

        # State for stats
        self.state = CARLA_SETTINGS_STATE.starting

        # External stop object (used to "know" when to exit
        self.stop = stop

        # We want to track NPC collisions so we can remove and spawn new ones
        # Collisions are really not rare when using built-in autopilot
        self.collisions = Queue()

        # Name of current world
        self.world_name = None

        # Controls world reloads
        self.rotate_map_every = None if not settings.ROTATE_MAP_EVERY else settings.ROTATE_MAP_EVERY * 60
        self.next_next_map_rotation = None if self.rotate_map_every is None else time.time() + self.rotate_map_every 

        # List of communications objects allowing Carla to pause agents (on changes like world change)
        self.agent_pauses = agent_pauses
        
        self.sync_mode = sync_mode
        
        self.envSettingsCond = envSettingsCond
        self.stepCond = stepCond
        
        
        

    def _collision_data(self, collision):
        self.collisions.put(collision)

    # Destroys given car NPC
    def _destroy_car_npc(self, car_npc):
        
        # First check if NPC is still alive
        if car_npc in self.spawned_car_npcs:
            # Iterate all agents (currently car itself and collision sensor)
            for actor in self.spawned_car_npcs[car_npc]:
                
                if hasattr(actor, 'set_autopilot'):
                    actor.set_autopilot(False)
                # If actor has any callback attached - stop it
                if hasattr(actor, 'is_listening') and actor.is_listening:
                    actor.stop()

                # And if is still alive - destroy it
                if hasattr(actor, 'is_alive') and actor.is_alive:
                    actor.destroy()
                
            # Remove from car NPCs' list
            del self.spawned_car_npcs[car_npc]

    def clean_car_npcs(self):
        
        # If there were any NPC cars - remove attached callbacks from it's agents
        for car_npc in self.spawned_car_npcs.keys():
            for actor in self.spawned_car_npcs[car_npc]:
                if hasattr(actor, 'set_autopilot'):
                    actor.set_autopilot(False)
                if hasattr(actor, 'is_listening') and actor.is_listening:
                    actor.stop()
                if hasattr(actor, 'is_alive') and actor.is_alive:
                    actor.destroy()
        # Reset NPC car list
        self.spawned_car_npcs = {}


     # Main method, being run in a thread
    def update_settings_in_loop(self):
        # Reset world name
        self.world_name = None

        # Reset weather object
        self.weather = None

        # Run infinitively
        while True:
            
            # Release agent pause locks, if there are any
            for agent_pause in self.agent_pauses:
                agent_pause.value = 0

            # Carla might break, make sure we can handle for that
            try:

                # If stop flag - exit
                if self.stop is not None and self.stop.value == STOP.stopping:
                    self.state = CARLA_SETTINGS_STATE.finished
                    return

                # If restart flag is being set - wait
                if self.restart:
                    self.state = CARLA_SETTINGS_STATE.restarting
                    time.sleep(0.1)
                    continue

                # Clean car npcs
                self.clean_car_npcs()

                # Connect to Carla, get worls and map
                self.client = carla.Client(*settings.CARLA_HOSTS[self.process_no][:2])
                self.client.set_timeout(5.0)
                self.world = self.client.get_world()
                self.map = self.world.get_map()
                self.world_name = self.map.name

                # Create weather object or update it if exists
                
                if self.weather is None:
                    self.weather = Weather(self.world.get_weather())
                else:
                    self.weather.set_new_weather(self.world.get_weather())
                if settings.WEATHER_PRESET:
                        weather_preset = find_weather_preset(settings.WEATHER_PRESET)
                        if weather_preset:
                            self.world.set_weather(weather_preset)

                # Get car blueprints and filter them
                self.car_blueprints = self.world.get_blueprint_library().filter('vehicle.*')
                self.car_blueprints = [x for x in self.car_blueprints if int(x.get_attribute('number_of_wheels')) == 4 and not x.id in settings.DISALLOWED_NPC_VEHICLES]

                # Get a list of all possible spawn points
                self.spawn_points = self.map.get_spawn_points()


                # Used to know when to reset next NPC car
                car_despawn_tick = 0

                # Set state to working
                self.state = CARLA_SETTINGS_STATE.working

            # In case of error, report it, wait a second and try again
            except Exception as e:
                print(e)
                self.state = CARLA_SETTINGS_STATE.error
                time.sleep(1)
                continue
                
            # Steps all settings
            while True:
                if self.sync_mode:
                    with self.envSettingsCond:
                        print("env waiting")
                        self.envSettingsCond.wait()
                # Used to measure sleep time at the loop end
                step_start = time.time()
                # If stop flag - exit
                if self.stop is not None and self.stop.value == STOP.stopping:
                    self.state = CARLA_SETTINGS_STATE.finished
                    return

                # Is restart flag is being set, break inner loop
                if self.restart:
                    break

                # Carla might break, make sure we can handle for that
                try:
                    
                    # World reload
                    if self.next_next_map_rotation and time.time() > self.next_next_map_rotation:
                       
                    
                            # Set restart flag
                        self.state = CARLA_SETTINGS_STATE.restarting
                        # Clean car npcs
                        self.clean_car_npcs()
                        # Set pause lock flag
                        for agent_pause in self.agent_pauses:
                            agent_pause.value = 1

                        # Wait for agents to stop playing and acknowledge
                        for agent_pause in self.agent_pauses:
                            while agent_pause.value != 2:
                                time.sleep(0.1)
                        # Get random map and load it
                        available_maps = [map for map in self.client.get_available_maps() if not map.endswith('Opt')]
                        current_map = self.client.get_world().get_map().name
                        map_choice = random.choice(list({map.split('/')[-1] for map in available_maps} - {current_map.split('/')[-1]}))                            
                        self.client.load_world(map_choice)
                        # needs to be put to sleep to avoid a jenkins/carla error
                        time.sleep(10.0)
                        # Wait for world to be fully loaded
                        
                        retries = 0
                        while self.client.get_world().get_map().name.split('/')[-1] != map_choice:
                            retries += 1
                            if retries >= 600:
                                raise Exception('Timeout when waiting for new map to be fully loaded')
                            time.sleep(0.1)
                        
                        # Inform agents that they can start playing
                        for agent_pause in self.agent_pauses:
                            agent_pause.value = 3

                        # Wait for agents to start playing
                        for agent_pause in self.agent_pauses:
                            retries = 0
                            while agent_pause.value != 0:
                                retries += 1
                                if retries >= 600:
                                    break
                        time.sleep(0.1)
                        self.next_next_map_rotation = time.time() + self.rotate_map_every
                        break
                        
                    
                    
                    
                 

                    #time.sleep(3.0) # ???         
                    while not self.collisions.empty():

                        # Gets first collision from the queue
                        collision = self.collisions.get()

                        # Gets car NPC's id and destroys it
                        car_npc = collision.actor.id
                        self._destroy_car_npc(car_npc)

                    # Count tick
                    car_despawn_tick += 1
                    
                    # Carla autopilot might cause cars to stop in the middle of intersections blocking whole traffic
                    # On some intersections there might be only one car moving
                    # We want to check for cars stopped at intersections and remove them
                    # Without that most of the cars can be waiting around 2 intersections
                    for car_npc in self.spawned_car_npcs.copy():
                        try:
                            # First check if car is moving
                            # It;s a simple check, not proper velocity calculation
                            velocity = self.spawned_car_npcs[car_npc][0].get_velocity()
                            simple_speed = velocity.x + velocity.y + velocity.z
                            
                            # If car is moving, continue loop
                            if simple_speed > 0.1 or simple_speed < -0.1:
                                continue

                            # Next get current location of the car, then a waypoint then check if it's intersection
                            location = self.spawned_car_npcs[car_npc][0].get_location()
                            waypoint = self.map.get_waypoint(location)
                            if not waypoint.is_intersection:
                                continue
                            # Car is not moving, it's intersection - destroy a car
                        except:
                            pass
                        self._destroy_car_npc(car_npc)
                        
                        



                    # If we reached despawn tick, remove oldest NPC
                    # The reson we want to do that is to rotate cars aroubd the map
                    if self.car_npcs[1] and car_despawn_tick >= self.car_npcs[1] and self.spawned_car_npcs:

                        # Get id of the first car on a list and destroy it
                        car_npc = list(self.spawned_car_npcs.keys())[0]
                        self._destroy_car_npc(car_npc)
                        car_despawn_tick = 0
                        
                        
                    if len(self.spawned_car_npcs) < self.car_npcs[0]:
                        # How many cars to spawn (up to 10)
                        cars_to_spawn = min(10, self.car_npcs[0] - len(self.spawned_car_npcs))

                        # Sometimes we can;t spawn a car
                        # It might be because spawn point is being occupied or because Carla broke
                        # We count errores and break on 5
                        retries = 0
                        # Iterate over number of cars to spawn
                        for _ in range(cars_to_spawn):
                            
                            # Break if too many errors
                            if retries >= 5:
                                break

                            # Get random car blueprint and randomize color and enable autopilot
                            car_blueprint = random.choice(self.car_blueprints)
                            if car_blueprint.has_attribute('color'):
                                color = random.choice(car_blueprint.get_attribute('color').recommended_values)
                                car_blueprint.set_attribute('color', color)
                            car_blueprint.set_attribute('role_name', 'autopilot')

                            # Try to spawn a car
                            for _ in range(5):
                                try:
                                    # Get random spot from a list from predefined spots and try to spawn a car there
                                    spawn_point = random.choice(self.spawn_points)
                                    car_actor = self.world.spawn_actor(car_blueprint, spawn_point)
                                    car_actor.set_autopilot()
                                    break
                                except:
                                    retries += 1
                                    time.sleep(0.1)
                                    continue

                            # Create the collision sensor and attach it to the car
                            
                            collision_sensor = self.world.get_blueprint_library().find('sensor.other.collision')
                            colsensor = self.world.spawn_actor(collision_sensor, carla.Transform(), attach_to=car_actor)

                            # Register a callback called every time sensor sends a new data
                            colsensor.listen(self._collision_data)

                            # Add the car and collision sensor to the list of car NPCs
                            self.spawned_car_npcs[car_actor.id] = [car_actor, colsensor]
                            
                                    
                        
 
                     # Tick a weather and set it in Carla
                     
                    if settings.DYNAMIC_WEATHER:
                        self.weather.tick(self.speed_factor)
                        self.world.set_weather(self.weather.weather)   

                    # Set stats for tensorboard
                    self.stats[0] = len(self.spawned_car_npcs)
                    self.stats[1] = self.weather._sun.azimuth
                    self.stats[2] = self.weather._sun.altitude
                    self.stats[3] = self.weather._storm.clouds
                    self.stats[4] = self.weather._storm.wind
                    self.stats[5] = self.weather._storm.rain

                    # In case of state being some other one report that everything is working
                    self.state = CARLA_SETTINGS_STATE.working

                    # Calculate how long to sleep and sleep
                    sleep_time = self.speed_factor - time.time() + step_start
                    #sleep_time = (1.0 / 60) - (time.time() + step_start)
                    if sleep_time > 0 and not self.sync_mode                                                                                                                                                                                                                                                                                                                                                                                                                                                                        :
                        time.sleep(sleep_time)
                    if self.sync_mode:
                        with self.stepCond:
                            print("step notified")
                            self.stepCond.notify()
                # In case of error, report it (reset flag set externally might break this loop only)
                except Exception as e:
                    print(str(e))
                    self.state = CARLA_SETTINGS_STATE.error